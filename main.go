package main

import (
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
	"time"
)

var siteStatus = make(map[string]int)

func main() {
	file, err := os.OpenFile("monitor.log", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)
	if err != nil {
		log.Fatalf("–ù–µ—É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ %v", err)
	}
	log.SetOutput(file)

	bot, err := tgbotapi.NewBotAPI(getBotToken())
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: %v", err)
	}
	bot.Debug = true
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60
	updates := bot.GetUpdatesChan(updateConfig)

	timer := time.NewTimer(time.Duration(getCheckInterval()) * time.Second)
	defer timer.Stop()
	for {
		select {
		case <-timer.C:
			newTicker := time.NewTimer(time.Duration(getCheckInterval()) * time.Second)
			if timer != newTicker {
				timer.Reset(time.Duration(getCheckInterval()) * time.Second)
			}
			newStatus := RequestToSite()
			ProcessStatusChanges(bot, newStatus)

		case update := <-updates:
			if update.Message != nil {
				handleMessage(bot, update.Message)
			}
		}

	}

}
func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	log.Printf("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %+v", message)
	switch message.Text {
	case "/start":
		log.Println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start")

		msg := tgbotapi.NewMessage(message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		msg.ReplyMarkup = createPersistentMenu()
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		} else {
			log.Println("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
		}
	default:
		if message.Text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤" {
			log.Println("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–æ–≤")
			statusText := "–°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤:\n"
			for url, status := range RequestToSite() {
				statusText += fmt.Sprintf("- %s: %d\n", url, status)
			}

			msg := tgbotapi.NewMessage(message.Chat.ID, statusText)
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			} else {
				log.Println("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Å–∞–π—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
			}
		} else {
			// –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
			log.Printf("–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s", message.Text)
			msg := tgbotapi.NewMessage(message.Chat.ID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			} else {
				log.Println("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
			}
		}
	}
}
func createPersistentMenu() tgbotapi.ReplyKeyboardMarkup {
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∞–π—Ç–æ–≤"),
		),
	)
	keyboard.ResizeKeyboard = true
	keyboard.OneTimeKeyboard = false
	return keyboard
}
func ProcessStatusChanges(bot *tgbotapi.BotAPI, newStatus map[string]int) {
	for key, value := range newStatus {
		var message tgbotapi.MessageConfig

		if value != 200 && siteStatus[key] == 200 {
			log.Printf("–°–∞–π—Ç %s —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ö–æ–¥: %d)", key, value)
			message = tgbotapi.NewMessage(int64(getChatID()), fmt.Sprintf(
				"‚ö†Ô∏è %s –°–∞–π—Ç %s –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ö–æ–¥: %d)",
				time.Now().Format("2006-01-02 15:04:05"), key, value,
			))
		}

		if value == 200 && siteStatus[key] != 200 {
			log.Printf("–°–∞–π—Ç %s —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω", key)
			message = tgbotapi.NewMessage(int64(getChatID()), fmt.Sprintf(
				"‚úÖ %s –°–∞–π—Ç %s —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω",
				time.Now().Format("2006-01-02 15:04:05"), key,
			))
		}

		if _, exists := siteStatus[key]; !exists {
			if value == 200 {
				log.Printf("–ù–æ–≤—ã–π —Å–∞–π—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω", key)
				message = tgbotapi.NewMessage(int64(getChatID()), fmt.Sprintf(
					"üÜï %s –ù–æ–≤—ã–π —Å–∞–π—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω",
					time.Now().Format("2006-01-02 15:04:05"), key,
				))
			} else {
				log.Printf("–ù–æ–≤—ã–π —Å–∞–π—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ö–æ–¥: %d)", key, value)
				message = tgbotapi.NewMessage(int64(getChatID()), fmt.Sprintf(
					"‚ö†Ô∏è %s –ù–æ–≤—ã–π —Å–∞–π—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ö–æ–¥: %d)",
					time.Now().Format("2006-01-02 15:04:05"), key, value,
				))
			}
		}

		if message.Text != "" {
			if _, err := bot.Send(message); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–∞–π—Ç–∞ %s: %v", key, err)
			} else {
				log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–∞–π—Ç–∞ %s", key)
			}
		}
	}

	for key := range siteStatus {
		if _, exists := newStatus[key]; !exists {
			log.Printf("–°–∞–π—Ç %s —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", key)
			message := tgbotapi.NewMessage(int64(getChatID()), fmt.Sprintf(
				"‚ùå %s –°–∞–π—Ç %s —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
				time.Now().Format("2006-01-02 15:04:05"), key,
			))

			if _, err := bot.Send(message); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞ %s: %v", key, err)
			} else {
				log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞ %s", key)
			}
		}
	}
	siteStatus = newStatus
}
